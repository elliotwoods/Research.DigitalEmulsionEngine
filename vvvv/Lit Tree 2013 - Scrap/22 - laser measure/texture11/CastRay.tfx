Texture2D<float2> CinP: PREVIOUS;

float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float4x4 InverseCameraProjectionMatrix;
	float4 CameraDistortion;
	float4x4 InverseProjectorViewProjectionMatrix;
	float MaxLength = 0.01f;
	float4x4 Transform;
};

class Ray
{
	float3 s; //start point
	float3 t; //transmission vector
	
	Ray intersect(Ray other) {
		Ray intersectRay;
		intersectRay.s = (float3) s;
		intersectRay.t = (float3) other.s - s;
		
		const float3 p1 = s, p2 = s+t, p3 = other.s, p4 = other.s+other.t;
		const float EPS = 1.0E-5;

		float3 p13,p43,p21;
		float d1343,d4321,d1321,d4343,d2121;
		float numer,denom;

		p13.x = p1.x - p3.x;
		p13.y = p1.y - p3.y;
		p13.z = p1.z - p3.z;
		p43.x = p4.x - p3.x;
		p43.y = p4.y - p3.y;
		p43.z = p4.z - p3.z;
		if (abs(p43.x) < EPS && abs(p43.y) < EPS && abs(p43.z) < EPS)
			return(intersectRay);
		p21.x = p2.x - p1.x;
		p21.y = p2.y - p1.y;
		p21.z = p2.z - p1.z;
		if (abs(p21.x) < EPS && abs(p21.y) < EPS && abs(p21.z) < EPS)
			return(intersectRay);

		d1343 = p13.x * p43.x + p13.y * p43.y + p13.z * p43.z;
		d4321 = p43.x * p21.x + p43.y * p21.y + p43.z * p21.z;
		d1321 = p13.x * p21.x + p13.y * p21.y + p13.z * p21.z;
		d4343 = p43.x * p43.x + p43.y * p43.y + p43.z * p43.z;
		d2121 = p21.x * p21.x + p21.y * p21.y + p21.z * p21.z;

		denom = d2121 * d4343 - d4321 * d4321;
		if (abs(denom) < EPS)
			return(intersectRay);
		numer = d1343 * d4321 - d1321 * d4343;

		const float ma = numer / denom;
		const float mb = (d1343 + d4321 * (ma)) / d4343;

		intersectRay.s.x = p1.x + ma * p21.x;
		intersectRay.s.y = p1.y + ma * p21.y;
		intersectRay.s.z = p1.z + ma * p21.z;
		intersectRay.t.x = p3.x + mb * p43.x;
		intersectRay.t.y = p3.y + mb * p43.y;
		intersectRay.t.z = p3.z + mb * p43.z;
		intersectRay.t = intersectRay.t - intersectRay.s;

		return intersectRay;
	}
	
	float getLength()
	{
		return length(t);
	}
	
	float3 getMidPoint()
	{
		return s + (t / 2.0f);
	}
};

Ray castCoordinate(float2 x, float4 distortion, float4x4 inversePerspective)
{
	float4 t = mul(float4(x.x,x.y,1.0f,1.0f), inversePerspective);
	t /= t.w;
	
	//!!Needs undistortion of x!
	
	Ray ray;
	ray.s = float3(0,0,0);
	ray.t = t.xyz;
	return ray;
}

Ray castCoordinate(float2 x, float4x4 inverseViewProjection)
{
	float4 s = float4(0, 0, 0, 1);
	float4 t = float4(x.x, x.y, 1.0f, 1.0f);
	
	s = mul(s, inverseViewProjection);
	s /= s.w;
	
	t = mul(t, inverseViewProjection);
	t /= t.w;
	
	Ray ray;
	
	ray.s = s.xyz;
	ray.t = t.xyz;
	return ray;
}

SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

uint2 getPixelCoord(float2 textureCoord)
{
	return textureCoord * R;
}

float2 getCoord(float2 textureCoord)
{
	float2 coord = textureCoord;
	coord.y = 1.0f - coord.y;
	coord *= 2.0f;
	coord -= 1.0f;
	
	return coord;	
}

float2 Undistort(float2 coord, float4 distortion)
{
	float r = length(coord);
	float rad_coeff = 1 + distortion.x*r*r + distortion.y*r*r*r*r;
	
	float xn = coord.x*rad_coeff, yn = coord.y*rad_coeff;
	xn += 2*distortion.z*xn*yn + distortion.w*(r*r+2*xn*xn);
	yn += distortion.z*(r*r+2*yn*yn) + 2*distortion.w*xn*yn;
	return float2(xn, yn);
}

float4 pTriangulate(float4 PosWVP:SV_POSITION,float2 texcoord:TEXCOORD0):SV_Target
{
	float2 projectorCoord = getCoord(texcoord);
	float2 cameraCoord = getCoord(CinP[getPixelCoord(texcoord)]);
	cameraCoord = Undistort(cameraCoord, CameraDistortion);
	
	Ray cameraRay = castCoordinate(cameraCoord, CameraDistortion, InverseCameraProjectionMatrix);
	Ray projectorRay = castCoordinate(projectorCoord, InverseProjectorViewProjectionMatrix);
	
	Ray intersect = cameraRay.intersect(projectorRay);
	
	float4 output;
	output.xyz = intersect.getMidPoint();
	output.w = 1.0f;
	
	float valid = intersect.getLength() < MaxLength;
	
	output = mul(output, Transform);
	output /= output.w;
	output.w = valid;
	
	return output;
}

float3 pCastRay(float4 PosWVP:SV_POSITION,float2 texcoord:TEXCOORD0):SV_Target
{
	float2 cameraCoord = getCoord(texcoord);
	cameraCoord = Undistort(cameraCoord, CameraDistortion);
	
	Ray cameraRay = castCoordinate(cameraCoord, CameraDistortion, InverseCameraProjectionMatrix);
	
	return cameraRay.t;
}

technique10 Triangulate{
	pass P0 <string format="R32G32B32A32_Float"; >
	{
		SetPixelShader(CompileShader(ps_4_0,pTriangulate()));
	}
}

technique10 CastRay{
	pass P0 <string format="R32G32B32A32_Float"; >
	{
		SetPixelShader(CompileShader(ps_4_0,pCastRay()));
	}
}



