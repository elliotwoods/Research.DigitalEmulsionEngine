Texture2D Input: PREVIOUS;
Texture2D Mean;
Texture2D Previous <string uiname="Previous";>;

SamplerState s0 <bool visible=false;string uiname="Sampler";> {
	Filter=MIN_MAG_MIP_POINT;
	AddressU=CLAMP;
	AddressV=CLAMP;
};
float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	int FrameIndex <int uimin=0; int uistep=1;> = 0;
	int FrameCountX <int uimin=0; int uistep=1;> = 10;
	bool Clear <bool bang=true;> = false;
	float ThresholdOffset <float uimin=0.0;float uimax=1.0;> = 1.0f / 255.0f;
};

uint2 pDecode(float4 PosWVP:SV_POSITION,float4 x:TEXCOORD0) : SV_TARGET{
	if (Clear) {
		return 0;
	}
	
	float2 uv = x.xy * R;
	uint2 value = Previous[uv].rg;
	float input = Input.Sample(s0, uv / R).r;
	float mean = Mean[uv].r;
	
	bool high = input > mean;
	
	if (FrameIndex < FrameCountX) {
		int mask = 1 << FrameIndex;
		if (high) {
			value.x = value.x | mask;
		} else {
			value.x = value.x & mask;
		}
	} else {
		int mask = 1 << (FrameIndex - FrameCountX);
		if (high) {
			value.y = value.y | mask;
		} else {
			value.y = value.y & mask;
		}
	}
	
    return 255;//uv;//float2(input, mean) * 255;
}


technique10 Decode {
	pass P0 <string format="R16G16_UInt"; > {
		SetPixelShader(CompileShader(ps_4_0,pDecode()));
	}
}
